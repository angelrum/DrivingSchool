swagger: "2.0"
info:
  description: "DrivingSchool API"
  version: "1.0.0"
  title: "DrivingSchool"
  contact:
    email: "team@drivingschoolhost.com"
host: "api.drivingschoolhost.com"
basePath: "/v1"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
consumes:
- "application/json"
- "application/xml"
produces:
- "application/json"
- "application/xml"
paths:
  /users:
    post:
      tags:
      - "user"
      summary: "Create user unlinked to a school"
      description: ""
      operationId: "createUnlinkedUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
        "405":
          description: "Invalid input"
      security:
      - api_key: []
    put:
      tags:
      - "user"
      summary: "Update user unlinked to a school"
      description: ""
      operationId: "updateUnlinkedUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
      security:
      - api_key: []      
  /users/{userId}:
    get:
      tags:
      - "user"
      summary: "Get any user by its ID"
      description: "User linked or unlinked to a school"
      operationId: "getUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "Get user object"
        required: true
        type: "integer"
      responses:
        "200":
          description: "OK"
          schema:
            allOf:
            - $ref: "#/definitions/User"
            - type: "object"
              properties:
                school:
                  type: "array"
                  items:
                    allOf:
                    - $ref: "#/definitions/School"
                    - type: "object"
                      properties:
                        company:
                          $ref: "#/definitions/Company"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
      security:
      - user_auth:
        - "write:users"
        - "read:users"          
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: ""
      operationId: "deleteUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
      security:
      - user_auth:
        - "write:users"
        - "read:users"           
  /users/{userId}/assign:
    put:
      tags:
      - "user"
      summary: "Update user unlinked to a school"
      description: ""
      operationId: "assignUser"
      parameters:
      - name: "userId"
        in: "path"
        description: ""
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        description: "Created user object"
        required: true
        schema:
          type: "object"
          properties:
            company:
              type : "object"
              properties:
                id:
                  type: "integer"
                assignStatus:
                  $ref: "#/definitions/CompanyRefType"
            school:
              type : "object"
              properties:
                id:
                  type: "integer"
                assignStatus:
                  $ref: "#/definitions/SchoolRefType"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
      security:
      - api_key: []  
  /companies:
    post:
      tags:
      - "company"
      summary: "Create company"
      description: ""
      operationId: "createCompany"
      parameters:
      - in: "body"
        name: "body"
        description: "Created company object"
        required: true
        schema:
          $ref: "#/definitions/Company"
      responses:
        "200":
          description: "OK"
        "405":
          description: "Invalid input"
    put:
      tags:
      - "company"
      summary: "Update company"
      description: ""
      operationId: "updateCompany"
      parameters:
      - in: "body"
        name: "body"
        description: "Update company object"
        required: true
        schema:
          $ref: "#/definitions/Company"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid company id supplied"
        "404":
          description: "Company not found"
    get:
      tags:
      - "company"
      summary: "Get all companies"
      description: ""
      operationId: "getCompanies"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Company"
  /companies/{companyId}:
    get:
      tags:
      - "company"
      summary: "Get company by id"
      description: ""
      operationId: "getCompany"
      parameters:
      - name: "companyId"
        in: "path"
        description: "The company id that needs to be fetched"
        required: true
        type: "integer"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Company"
        "400":
          description: "Invalid company id supplied"
        "404":
          description: "Company not found"
    delete:
      tags:
      - "company"
      summary: "Delete company"
      description: ""
      operationId: "deleteCompany"
      parameters:
      - name: "companyId"
        in: "path"
        description: "The company id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        "400":
          description: "Invalid company id supplied"
        "404":
          description: "Company not found"
  /companies/{companyId}/schools:
    get:
      tags:
      - "company"
      summary: "Get all schools of company"
      description: ""
      operationId: "getCompanySchools"
      parameters:
      - name: "companyId"
        in: "path"
        description: "Company id which contains schools"
        required: true
        type: "integer"      
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/School"
  /companies/{companyId}/users:
    get:
      tags:
      - "company"
      summary: "Get users of company"
      description: ""
      operationId: "getCompanyUsers"
      parameters:
      - name: "companyId"
        in: "path"
        description: "Company id which contains schools"
        required: true
        type: "integer"  
      - name: "body"
        in: "body"
        description: ""
        required: true
        schema:
          type: "array"
          items:
            type: "object"
            properties:
              userType:
                $ref: "#/definitions/UserType"
              assignStatus:
                type: "array"
                items:
                  $ref: "#/definitions/CompanyRefType"
              userStatus:
                type: "array"
                items:
                  $ref: "#/definitions/ActiveStatusType"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"              
  /schools:
    post:
      tags:
      - "school"
      summary: "Create school"
      description: ""
      operationId: "createSchool"
      parameters:
      - in: "body"
        name: "body"
        description: "Created school object"
        required: true
        schema:
          $ref: "#/definitions/School"
      responses:
        "200":
          description: "OK"
        "405":
          description: "Invalid input"
    put:
      tags:
      - "school"
      summary: "Update school"
      description: ""
      operationId: "updateSchool"
      parameters:
      - in: "body"
        name: "body"
        description: "Update school object"
        required: true
        schema:
          $ref: "#/definitions/School"
      responses:
        "400":
          description: "Invalid school id supplied"
        "404":
          description: "School not found"
    get:
      tags:
      - "school"
      summary: "Get all schools"
      description: ""
      operationId: "getAllSchools"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              allOf:
              - $ref: "#/definitions/School"
              - type: "object"
                properties:
                  company:
                    $ref: "#/definitions/Company"
  /schools/{schoolId}:
    get:
      tags:
      - "school"
      summary: "Get school by id"
      description: ""
      operationId: "getSchool"
      parameters:
      - name: "schoolId"
        in: "path"
        description: "The school id that needs to be fetched"
        required: true
        type: "integer"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/School"
        "400":
          description: "Invalid school id supplied"
        "404":
          description: "School not found"
    delete:
      tags:
      - "school"
      summary: "Delete school"
      description: ""
      operationId: "deleteSchool"
      parameters:
      - name: "schoolId"
        in: "path"
        description: "The school id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        "400":
          description: "Invalid school id supplied"
        "404":
          description: "School not found"
  /school/findByCity:
    get:
      tags:
      - "school"
      summary: "Get schools by city or its district"
      description: ""
      operationId: "findSchoolsByCity"
      parameters:
      - name: "cityId"
        in: "query"
        description: "City id that needs to be considered for filter"
        required: true
        type: "integer"
      - name: "districtId"
        in: "query"
        description: "District id that needs to be considered for filter"
        required: false
        type: "integer"    
      - name: "activeStatus"
        in: "query"
        description: ""
        required: false
        type: "boolean"
        default: true
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"          
  /cities:
    get:
      tags:
      - "city"
      summary: "Get all cities with active schools"
      description: ""
      operationId: "getCities"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
securityDefinitions:
  user_auth:
    type: "oauth2"
    authorizationUrl: "http://drivingschoolhost.com/oauth/dialog"
    flow: "implicit"
    scopes:
      write:users: "modify user in your account"
      read:users: "read your data"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Company:
    type: "object"
    required:
    - "shortName"
    - "activeStatus"
    properties:
      id:
        type: "integer"
      shortName:
        type: "string"
      fullName:
        type: "string"
      legalEntityAddress:
        $ref: "#/definitions/Address"
      actualAddress:
        $ref: "#/definitions/Address"
      phone:
        type: "string"
      email:
        type: "string"
      website:
        type: "string"
      activeStatus:
        $ref: "#/definitions/ActiveStatusType"
    xml:
      name: "Category"
  School:
    type: "object"
    required:
    - "name"
    - "companyId"
    - "address"
    - "activeStatus"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      companyId:
        type: "integer"
      phone:
        type: "string"
      email:
        type: "string"
      address:
        $ref: "#/definitions/Address"
      activeStatus:
        $ref: "#/definitions/ActiveStatusType"      
  User:
    type: "object"
    required:
    - "type"
    - "firstName"
    - "lastName"
    - "email"
    - "phone"
    - "activeStatus"    
    properties:
      id:
        type: "integer"
      type:
        $ref: "#/definitions/UserType"
      firstName:
        type: "string"
      middleName: 
        type: "string"
      lastName:
        type: "string"
      age:
        type: "integer"
      email:
        type: "string"
      emailVerifStatus:
        type: "boolean"
      phone:
        type: "string"
      phoneVerifStatus:
        type: "boolean"
      activeStatus:
        $ref: "#/definitions/ActiveStatusType"
    xml:
      name: "User"
  Address:
    type: "object"
    required:
    - "region"
    - "city"
    - "street"
    - "building"
    properties:
      region:
        type: "string"
      city:
        type: "string"
      zip:
        type: "string"
      district:
        type: "string"
      street:
        type: "string"
      building:
        type: "string"
      entrance:
        type: "string"
      floor:
        type: "string"
      office:
        type: "string"
      geopos:
        type: "object"
        required:
        - "latitude"
        - "longitude"
        properties:
          latitude:
            type: "string"
          longitude:
            type: "string"
  UserType:
    type: "string"
    enum:
    - "admin"
    - "manager"
    - "teacher"
    - "instructor"
    - "student"  
  ActiveStatusType:
    type: "string"
    enum:
    - "active"
    - "inactive"
  SchoolRefType:
    type: "string"
    enum:
    - "pending"
    - "enabled"
    - "disabled"
  CompanyRefType:
    type: "string"
    enum:
    - "pending"
    - "contracted"
    - "blocked"
    - "released"
    - "terminated"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"